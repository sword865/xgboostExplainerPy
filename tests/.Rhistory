install.packages("jiebaR")
install.packages("tidytext")
library("tidytext", lib.loc="/usr/local/lib/R/3.4/site-library")
rt=read.table("1.txt", head =T)
rt['BS']
rt['BS']==BV
rt['BS']==B
rt['BS']=='B'
rt[rt['BS']=='B',]
rt[rt['BS']=='B',"P"]
rt=read.table("1.txt", head =T)
rt[rt['BS']=='B',"P"]
rt[rt['BS']=='B',"P"]
rt[rt['BS']=='B',"P"]*rt[rt['BS']=='B',"N"]
mean(rt[rt['BS']=='B',"P"]*rt[rt['BS']=='B',"N"])
mean(rt[rt['BS']=='S',"P"]*rt[rt['BS']=='S',"N"])
rt[rt['BS']=='B',"N"]
rt[rt['BS']=='B',"C"]
rt[rt['BS']=='B'&rt['BS']=='B',"C"]
rt[rt['BS']=='B'&rt['C']=='rt['BS']=='B'',"C"]
rt[rt['BS']=='B'&rt['C']=='IH1707.CFFEX,"C"]
rt[rt['BS']=='B'&rt['C']=='IH1707.CFFEX,]
rt[rt['BS']=='B'&rt['C']=='IH1707.CFFEX',]
dim(rt[rt['BS']=='B'&rt['C']=='IH1707.CFFEX',])
dim(rt[rt['BS']=='B',])
dim(rt[rt['BS']=='S'&rt['C']=='IH1708.CFFEX',])
dim(rt[rt['BS']=='S',])
rt2=read.table("2.txt", head =T)
dim(rt2[rt2['BS']=='S'&rt2['C']=='1708',])
rt2
rt2["P"]
rt2["C"]=1707
rt2["C"]==1707
rt2[rt2["C"]==1707,]
rt2[rt2["C"]==1707, "P"]]
rt2[rt2["C"]==1707, "P"]
rt2[rt2["C"]==1707, "P"]*rt2[rt2["N"]==1707, "N"]
rt2[rt2["C"]==1707, "P"]*rt2[rt2["N"]==1707, "N"]
rt2[rt2["C"]==1707, "P"]
rt2[rt2["C"]==1707, "N"]
mean(rt2[rt2["C"]==1707, "P"]*rt2[rt2["C"]==1707, "N"])
mean(rt2[rt2["C"]==1708, "P"]*rt2[rt2["C"]==1708, "N"])
rt2[rt2["C"]==1708, "P"]
rt2["C"]==1708
rt2$C
rt2=read.table("2.txt", head =T)
mean(rt2[rt2["C"]==1707, "P"]*rt2[rt2["C"]==1707, "N"])
mean(rt2[rt2["C"]==1708, "P"]*rt2[rt2["C"]==1708, "N"])
mean(rt[rt['BS']=='B',"P"]*rt[rt['BS']=='B',"N"])
mean(rt[rt['BS']=='S',"P"]*rt[rt['BS']=='S',"N"])
rt<-read.table("717",head=TRUE)
rt<-read.table("717",head=F)
View(rt)
sum(rt$V8)
rt$V4=='1707'
rt$V4=='1707'&rt$V5=="S"
rt$V8[rt$V4=='1707'&rt$V5=="S"]
sum(rt$V8[rt$V4=='1707'&rt$V5=="S"])
sum(rt$V8[rt$V4=='1708'&rt$V5=="B"])
sum(rt$V8[rt$V4=='1708'])
sum(rt$V8[rt$V4=='1707'])
rt<-read.table("718",head=TRUE)
sum(rt$V8[rt$V4=='1707'&rt$V5=="S"])
View(rt)
rt<-read.table("718",head=F)
sum(rt$V8[rt$V4=='1707'&rt$V5=="S"])
sum(rt$V8[rt$V4=='1708'&rt$V5=="B"])
rt<-read.table("719",head=F)
sum(rt$V8[rt$V4=='1707'&rt$V5=="S"])
sum(rt$V8[rt$V4=='1708'&rt$V5=="B"])
rt<-read.table("719",head=F)
sum(rt$V8[rt$V4=='1707'&rt$V5=="S"])
rt<-read.table("720",head=F)
sum(rt$V8[rt$V4=='1707'&rt$V5=="S"])
sum(rt$V8[rt$V4=='1708'&rt$V5=="B"])
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(4)
f <- function(x) {
g <- function(y) {
y + z
}
z <- x
x + g(x)
}
f(4)
z
f <- function(x) {
g <- function(y) {
y + z
}
x + g(x)
}
f(4)
setwd("~/Develop/StatProjects")
rt<-read.table("data", head=T)
View(rt)
cor.test(rt$CBOT.SM,rt$SM)
mean(rt$SM)
na.omit(rt)
rt$CBOT.SM==0
sum(rt$CBOT.SM==0)
sum(rt$CBOT.S==0)
sum(rt$SM==0)
sum(rt$SM==0.0)
rt$SM==0.0
rt$SM<0.01
rt$SM
rt$SM = 0.000
rt$SM == 0.0000
rt<-read.table("data", head=T)
rt<-na.omit(rt)
source('~/Develop/StatProjects/script.R')
View(rt)
rt$SM<0.01
sum(rt$SM<0.01)
rt<-na.omit(rt)
rt<-read.table("data", head=T)
rt<-read.table("data", head=T)
rt<-na.omit(rt)
row_sub = apply(dd, 1, function(row) all(row !=0.000 ))
row_sub = apply(rt, 1, function(row) all(row !=0.000 ))
rt<-read.table("data", head=T)
row_sub = apply(rt, 1, function(row) all(row !=0.000 ))
rt<-read.table("data", head=T)
rt<-na.omit(rt)
row_sub = apply(rt, 1, function(row) all(row !=0.000 ))
rt<-rt[row_sub,]
View(rt)
rt<-read.table("data", head=T)
rt<-na.omit(rt)
row_sub = apply(rt, 1, function(row) all(row !=0.0000 ))
rt<-rt[row_sub,]
View(rt)
rt$SM[48]
rt$SM[48] == 0.0000
rt$SM[48] == "0.0000"
rt<-read.table("data", head=T)
rt<-na.omit(rt)
row_sub = apply(rt, 1, function(row) all(row != "0.0000" ))
rt<-rt[row_sub,]
cbot.sm<-as.numeric(rt$CBOT.SM)
cbot.s<-as.numeric(rt$CBOT.S)
sm<-as.numeric(rt$SM)
View(rt)
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
View(rt)
rt<-read.table("data", head=T)
View(rt)
rt$CBOT.SM
max(rt$CBOT.SM)
min(rt$CBOT.SM)
min(rt$CBOT.S)
rt$CBOT.S
rt$SM
setwd("~/Develop/StatProjects")
rt<-read.table("data", head=T)
View(rt)
rt$CBOT.SM
rt$CBOT.S
rt<-read.table("data", head=T)
rt<-na.omit(rt)
row_sub = apply(rt, 1, function(row) all(row != "0.0000" ))
rt<-rt[row_sub,]
cbot.sm<-as.numeric(rt$CBOT.SM)
cbot.s<-as.numeric(rt$CBOT.S)
sm<-as.numeric(rt$SM)
rt<-read.table("data", head=T)
rt<-na.omit(rt)
row_sub = apply(rt, 1, function(row) all(row != 0.0000 ))
rt<-rt[row_sub,]
cbot.sm<-as.numeric(rt$CBOT.SM)
cbot.s<-as.numeric(rt$CBOT.S)
sm<-as.numeric(rt$SM)
rt<-read.table("data", head=T)
rt<-na.omit(rt)
row_sub = apply(rt, 1, function(row) all(row < 0.001 ))
rt<-rt[row_sub,]
rt<-read.table("data", head=T)
rt<-na.omit(rt)
row_sub = apply(rt, 1, function(row) all(row > 1.0 ))
rt<-rt[row_sub,]
cbot.sm<-as.numeric(rt$CBOT.SM)
cbot.s<-as.numeric(rt$CBOT.S)
sm<-as.numeric(rt$SM)
View(rt)
rt<-read.table("data", head=T)
rt<-na.omit(rt)
rt
View(rt)
min(rt$SM)
min(rt$CBOT.SM)
min(rt$CBOT.S)
rt$S == 0
sum(rt$S == 0)
sum(rt$S <  1.0)
rt<-read.table("data", head=T)
rt<-na.omit(rt)
row_sub = (rt$S != 0)
rt<-rt[row_sub,]
cor.test(rt$CBOT.SM, rt$SM)
cor.test(rt$CBOT.S, rt$SM)
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
lm1 <- lm(rt$CBOT.SM, rt$SM)
lm1 <- lm(rt$CBOT.SM ~ rt$SM)
lm1
lm1$coefficients
lm1$coefficients[0]
lm1$coefficients[1]
lm1$coefficients[2]
as.numeric(lm1$coefficients[2])
a = as.numeric(lm1$coefficients[1])
b = as.numeric(lm1$coefficients[2])
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
lm1
b = as.numeric(lm1$coefficients[1])
a = as.numeric(lm1$coefficients[2])
abline(a = a, b = b, col = "red")
?abline
lm1
a
b
abline(lm1)
abline(h = 400)
abline(v) = 400)
abline(v = 400)
abline(a = a, b = b)
abline(a = a, b = 1)
abline(a = a, b = 100)
?abline
a
b
400*-12
d1=rt$CBOT.SM
d2=rt$SM
lm1 <- lm(d1~d2)
lm1
a = as.numeric(lm1$coefficients[2])
b = as.numeric(lm1$coefficients[1])
a
b
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
source('~/Develop/StatProjects/script.R')
unlink('Rmarkdown/一条后端智能组系统介绍_cache', recursive = TRUE)
library(DiagrammeR)
install.packages("DiagrammeR")
install.packages("DiagrammeR")
install.packages("DiagrammeR")
install.packages("igraph")
devtools::install_github("gaborcsardi/pkgconfig")
devtools::install_github("igraph/rigraph")
install.packages("DiagrammeR")
library(igraph)
library(DiagrammeR)
library(RColorBrewer)
col<-brewer.pal(3,'Set1')[1]
t<-seq(0,60,len=100)
x<--.01*(-t^2+40*t+1200)*sin(pi*t/180)
y<-.01*(-t^2+40*t+1200)*cos(pi*t/180)
pdf('hearts.pdf',wid=4,hei=3)
par(mar=c(0,0,0,0))
plot(c(-12,14),c(0,20),type='n',axes=T,xlab='',ylab='')
arrows(-11,8,14,8,lwd=10,col='gold')
arrows(14,8,-11,8,lwd=10,col='gold',angle=120)
arrows(14,8,-10,8,lwd=10,col='gold',angle=120)
arrows(14,8,-9,8,lwd=10,col='gold',angle=120)
polygon(x,y,col=col,border=NA)
polygon(-x,y,col=col,border=NA)
lines(x,y,lwd=2)
polygon(x+3,y,col=col,border=NA)
polygon(-x+3,y,col=col,border=NA)
lines(x,y+3,lwd=2)
lines(-x+3,y,lwd=2)
arrows(5,8,14,8,lwd=10,col='gold')
source('~/Downloads/code.R')
source('~/Downloads/code.R')
source('~/Downloads/code.R')
source('~/Downloads/code.R')
l<-c(446859584.01 ,461363024.01 ,471146984.01 ,470534504.01 ,465958904.01 ,470020184.01 ,469033905.94 ,463978785.94 ,459999345.94 ,464083927.27 ,467001136.76 ,473584995.12 ,482024529.63 ,478796535.49 ,485585723.18 ,485517803.18 ,307014083.18 ,309946923.06 ,315288963.06 ,303870572.67 ,302757692.67 ,379462949.64 ,386523250.48 ,392842821.50 ,400585260.83 ,406951870.67 ,406042156.46 ,406516516.46 ,407394316.46 ,403938316.46 ,423297676.46 ,425943076.46 ,426617956.46 ,420177916.46 ,421413381.65 ,411049221.65 ,410010021.65 ,413664741.65 ,404523981.65 ,396293181.65 ,400728621.65 ,404823141.65 ,406198822.96 ,394526259.76 ,394987961.27 ,409967373.47 ,408393169.98 ,409066571.76 ,422216651.76 ,408476891.76 ,405463331.76 ,410375171.76 ,403967171.76 ,408492371.76 ,427794851.76 ,423902771.76 ,420818291.76 ,421065371.76 ,410884211.76 ,418858211.76 ,441137670.24 ,441858510.24 ,443101290.24 ,438926130.24 ,434814030.24 ,434267105.03 ,436425664.59 ,423635168.88 ,420525168.53 ,419165048.15 ,405273915.55 ,410724639.62 ,413891028.85 ,409538053.51 ,414358153.51 ,416795593.51 ,416294966.33 ,414021926.33 ,410465560.82 ,406575190.83 ,403849794.18 ,396321654.18 ,396773154.18 ,396611693.34 ,398187958.10 ,402502758.73 ,415685811.84 ,369259736.26 ,369350230.39 ,366829262.34 ,363830111.07 ,365001365.52 ,367786685.52 ,374682665.52 ,374460245.52 ,390397685.52 ,390881181.21 ,392869401.21 ,396466761.21 ,393277341.21 ,386797881.21 ,308737741.21 ,313922401.21 ,318616441.21 ,322115521.21 ,321239923.36 ,321309933.72 ,314771047.24 ,311547871.65 ,206107600.56 ,209129800.56 ,208363300.56 ,210202900.56 ,213575500.56 ,213728800.56 ,215940700.56 ,216816700.56 ,215896900.56 ,216751000.56 ,216356800.56 ,214582900.56 ,211845400.56 ,215962600.56 ,147079500.56 ,146050200.56 ,147320400.56 ,151457740.09 ,149122588.87 ,153172589.74 ,156078329.74 ,158418354.76 ,156499895.44 ,160077170.27 ,161085973.74 ,159813493.74 ,161158273.74 ,160383128.29 ,160183868.29 ,160250288.29 ,160257668.29 ,160329008.29 ,160710308.29 ,160916948.29 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160632712.03 ,160689390.51 ,160614545.16 ,158356572.56 ,159182772.56 ,161005272.56 ,163095072.56 ,161807172.56 ,160786572.56 ,159811772.27 ,161927684.58 ,161490284.58 ,157383584.58 ,160615484.58 ,158622884.58 ,159230384.58 ,160664084.58 ,162802484.58 ,162608084.58 ,160809884.58 ,160591184.58 ,158598584.58 ,152936684.58 ,153082484.58 ,151648784.58 ,150506684.58 ,148295384.58 ,148871393.10 ,149801990.41 ,148707991.09 ,149238910.22 ,149724910.22 ,149093110.22 ,146614510.22 ,143698510.22 ,140029210.22 ,138109510.22 ,141778810.22 ,140223610.22 ,140466610.22 ,141924610.22 ,144451810.22 ,138814210.22 ,134124310.22 ,133176610.22 ,131329810.22 ,125886610.22 ,123549475.97 ,126490617.46 ,129581919.17 ,126568939.71 ,125999251.48 ,124594831.48 ,117351811.48 ,117478051.48 ,124421251.48 ,126228491.15 ,133167851.15 ,132504251.15 ,132485291.15 ,137604491.15 ,137699291.15 ,136144571.15 ,134286491.15 ,138817931.15 ,140827691.15 ,136447931.15 ,131025371.15 ,133801095.24 ,131916472.69 ,133752973.20 ,136226211.58 ,136111131.58 ,133793091.58 ,134234567.54 ,132768939.28 ,132651459.28 ,132503619.28 ,132638259.28 ,132218499.28 ,132391419.28)\
l<-c(446859584.01 ,461363024.01 ,471146984.01 ,470534504.01 ,465958904.01 ,470020184.01 ,469033905.94 ,463978785.94 ,459999345.94 ,464083927.27 ,467001136.76 ,473584995.12 ,482024529.63 ,478796535.49 ,485585723.18 ,485517803.18 ,307014083.18 ,309946923.06 ,315288963.06 ,303870572.67 ,302757692.67 ,379462949.64 ,386523250.48 ,392842821.50 ,400585260.83 ,406951870.67 ,406042156.46 ,406516516.46 ,407394316.46 ,403938316.46 ,423297676.46 ,425943076.46 ,426617956.46 ,420177916.46 ,421413381.65 ,411049221.65 ,410010021.65 ,413664741.65 ,404523981.65 ,396293181.65 ,400728621.65 ,404823141.65 ,406198822.96 ,394526259.76 ,394987961.27 ,409967373.47 ,408393169.98 ,409066571.76 ,422216651.76 ,408476891.76 ,405463331.76 ,410375171.76 ,403967171.76 ,408492371.76 ,427794851.76 ,423902771.76 ,420818291.76 ,421065371.76 ,410884211.76 ,418858211.76 ,441137670.24 ,441858510.24 ,443101290.24 ,438926130.24 ,434814030.24 ,434267105.03 ,436425664.59 ,423635168.88 ,420525168.53 ,419165048.15 ,405273915.55 ,410724639.62 ,413891028.85 ,409538053.51 ,414358153.51 ,416795593.51 ,416294966.33 ,414021926.33 ,410465560.82 ,406575190.83 ,403849794.18 ,396321654.18 ,396773154.18 ,396611693.34 ,398187958.10 ,402502758.73 ,415685811.84 ,369259736.26 ,369350230.39 ,366829262.34 ,363830111.07 ,365001365.52 ,367786685.52 ,374682665.52 ,374460245.52 ,390397685.52 ,390881181.21 ,392869401.21 ,396466761.21 ,393277341.21 ,386797881.21 ,308737741.21 ,313922401.21 ,318616441.21 ,322115521.21 ,321239923.36 ,321309933.72 ,314771047.24 ,311547871.65 ,206107600.56 ,209129800.56 ,208363300.56 ,210202900.56 ,213575500.56 ,213728800.56 ,215940700.56 ,216816700.56 ,215896900.56 ,216751000.56 ,216356800.56 ,214582900.56 ,211845400.56 ,215962600.56 ,147079500.56 ,146050200.56 ,147320400.56 ,151457740.09 ,149122588.87 ,153172589.74 ,156078329.74 ,158418354.76 ,156499895.44 ,160077170.27 ,161085973.74 ,159813493.74 ,161158273.74 ,160383128.29 ,160183868.29 ,160250288.29 ,160257668.29 ,160329008.29 ,160710308.29 ,160916948.29 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160723357.32 ,160632712.03 ,160689390.51 ,160614545.16 ,158356572.56 ,159182772.56 ,161005272.56 ,163095072.56 ,161807172.56 ,160786572.56 ,159811772.27 ,161927684.58 ,161490284.58 ,157383584.58 ,160615484.58 ,158622884.58 ,159230384.58 ,160664084.58
,162802484.58 ,162608084.58 ,160809884.58 ,160591184.58 ,158598584.58 ,152936684.58 ,153082484.58 ,151648784.58 ,150506684.58 ,148295384.58 ,148871393.10 ,149801990.41 ,148707991.09 ,149238910.22 ,149724910.22 ,149093110.22 ,146614510.22 ,143698510.22 ,140029210.22 ,138109510.22 ,141778810.22 ,140223610.22 ,140466610.22 ,141924610.22 ,144451810.22 ,138814210.22 ,134124310.22 ,133176610.22 ,131329810.22 ,125886610.22 ,123549475.97 ,126490617.46 ,129581919.17 ,126568939.71 ,125999251.48 ,124594831.48 ,117351811.48 ,117478051.48 ,124421251.48 ,126228491.15 ,133167851.15 ,132504251.15 ,132485291.15 ,137604491.15 ,137699291.15 ,136144571.15 ,134286491.15 ,138817931.15 ,140827691.15 ,136447931.15 ,131025371.15 ,133801095.24 ,131916472.69 ,133752973.20 ,136226211.58 ,136111131.58 ,133793091.58 ,134234567.54 ,132768939.28 ,132651459.28 ,132503619.28 ,132638259.28 ,132218499.28 ,132391419.28)
l
len(l)
length(l)
hist(l)
plot(l)
plot(l, type="l")
hist(l)
install.packages("xgboost")
library("xgboost")
setwd("~/Develop/PyCharmProjects/xgboostExplainerPy/tests")
library("xgboost")
dtrain = xgb.DMatrix("train.libsvm")
dtest = xgb.DMatrix("test.libsvm")
num_iter=50
dtrain
xgb <- xgboost(data=dtrain)
xgb <- xgboost(data=dtrain, nrounds = 25)
xgb <- xgboost(data=dtrain, nrounds = 50)
xgb
param <- list(objective = "binary:logistic", base_score = 0.5)
xgb <- xgboost(data=dtrain, params = param, nrounds = 50)
xgb <- xgboost(data=dtrain, params = param, nrounds = 50)
xgb.model.dt.tree() <- xgboost(data=dtrain, params = param, nrounds = 50)
xgb.model <- xgboost(data=dtrain, params = param, nrounds = 50)
col_names = attr(dtrain, ".Dimnames")[[2]]
col_names
trees = xgb.model.dt.tree(col_names, model = xgb.model)
trees
View(trees)
xgb.model.dt.tree
trees = xgb.model.dt.tree(col_names, model = xgb.model)
col_names = attr(dtrain, ".Dimnames")[[2]]
col_names
trees = xgb.model.dt.tree(col_names, model = xgb.model, trees = NULL)
trees
nodes.train = predict(xgb.model,dtrain, predleaf =TRUE)
node.tr
nodes.train
tree_list = copy(trees)
ttrees
trees
copy(trees)
?copy
trees[,leaf := Feature == 'Leaf']
trees
trees[,leaf := Feature == 'Leaf']
trees[,H:=Cover]
which(tree_list[,leaf]==F)
which(tree[,leaf]==F)
which(trees[,leaf]==F)
View(nodes.train)
View(trees)
View(trees)
??xgb.model.dt.tree
?xgb.model.dt.tree
rev(c(2,1,0))
vector("list",5)
?shift
shift([1,2,3], type="lead")
shift(c(1,2,3), type="lead")
library(devtools)
install_github("AppliedDataSciencePartners/xgboostExplainer")
xy
data.frame(x,y)
x
x<-1:5
x
xy=x
y=x
data.frame(x,y)
df = data.frame(x,y)
df[,(sum=sum(y)), by=x]
df[,.(sum=sum(y)), by=x]
df[,.(sum=sum(y)), by=x]
df
df[,.(sum=sum(y))]
tmp
col_names = attr(trainingData, ".Dimnames")[[2]]
trees
library("xgboostExplainer")
getStatsForTrees
etStatsForTrees = function(trees, nodes.train, type = "binary", base_score = 0.5){
#Accepts data table of tree (the output of xgb.model.dt.tree)
#Returns a list of tree, with the stats filled in
tree_list = copy(trees)
tree_list[,leaf := Feature == 'Leaf']
tree_list[,H:=Cover]
non.leaves = which(tree_list[,leaf]==F)
# The default cover (H) seems to lose precision so this loop recalculates it for each node of each tree
cat('\n\nRecalculating the cover for each non-leaf... \n')
pb <- txtProgressBar(style=3)
j = 0
for (i in rev(non.leaves)){
left = tree_list[i,Yes]
right = tree_list[i,No]
tree_list[i,H:=tree_list[ID==left,H] + tree_list[ID==right,H]]
j=j+1
setTxtProgressBar(pb, j / length(non.leaves))
}
if (type == 'regression'){
base_weight = base_score
} else{
base_weight = log(base_score / (1-base_score))
}
tree_list[leaf==T,weight:=base_weight + Quality]
tree_list[,previous_weight:=base_weight]
tree_list[1,previous_weight:=0]
tree_list[leaf==T,G:=-weight*H]
tree_list = split(tree_list,as.factor(tree_list$Tree))
num_tree_list = length(tree_list)
treenums =  as.character(0:(num_tree_list-1))
t = 0
cat('\n\nFinding the stats for the xgboost trees...\n')
pb <- txtProgressBar(style=3)
for (tree in tree_list){
t=t+1
num_nodes = nrow(tree)
non_leaf_rows = rev(which(tree[,leaf]==F))
for (r in non_leaf_rows){
left = tree[r,Yes]
right = tree[r,No]
leftG = tree[ID==left,G]
rightG = tree[ID==right,G]
tree[r,G:=leftG+rightG]
w=tree[r,-G/H]
tree[r,weight:=w]
tree[ID==left,previous_weight:=w]
tree[ID==right,previous_weight:=w]
}
tree[,uplift_weight:=weight-previous_weight]
setTxtProgressBar(pb, t / num_tree_list)
}
return (tree_list)
}
tree_list = getStatsForTrees(trees, dtrain, type = "binary", base_score = 0.5)
getStatsForTrees = function(trees, nodes.train, type = "binary", base_score = 0.5){
#Accepts data table of tree (the output of xgb.model.dt.tree)
#Returns a list of tree, with the stats filled in
tree_list = copy(trees)
tree_list[,leaf := Feature == 'Leaf']
tree_list[,H:=Cover]
non.leaves = which(tree_list[,leaf]==F)
# The default cover (H) seems to lose precision so this loop recalculates it for each node of each tree
cat('\n\nRecalculating the cover for each non-leaf... \n')
pb <- txtProgressBar(style=3)
j = 0
for (i in rev(non.leaves)){
left = tree_list[i,Yes]
right = tree_list[i,No]
tree_list[i,H:=tree_list[ID==left,H] + tree_list[ID==right,H]]
j=j+1
setTxtProgressBar(pb, j / length(non.leaves))
}
if (type == 'regression'){
base_weight = base_score
} else{
base_weight = log(base_score / (1-base_score))
}
tree_list[leaf==T,weight:=base_weight + Quality]
tree_list[,previous_weight:=base_weight]
tree_list[1,previous_weight:=0]
tree_list[leaf==T,G:=-weight*H]
tree_list = split(tree_list,as.factor(tree_list$Tree))
num_tree_list = length(tree_list)
treenums =  as.character(0:(num_tree_list-1))
t = 0
cat('\n\nFinding the stats for the xgboost trees...\n')
pb <- txtProgressBar(style=3)
for (tree in tree_list){
t=t+1
num_nodes = nrow(tree)
non_leaf_rows = rev(which(tree[,leaf]==F))
for (r in non_leaf_rows){
left = tree[r,Yes]
right = tree[r,No]
leftG = tree[ID==left,G]
rightG = tree[ID==right,G]
tree[r,G:=leftG+rightG]
w=tree[r,-G/H]
tree[r,weight:=w]
tree[ID==left,previous_weight:=w]
tree[ID==right,previous_weight:=w]
}
tree[,uplift_weight:=weight-previous_weight]
setTxtProgressBar(pb, t / num_tree_list)
}
return (tree_list)
}
tree_list = getStatsForTrees(trees, dtrain, type = "binary", base_score = 0.5)
copy
??copy
library(data.table)
tree_list = getStatsForTrees(trees, dtrain, type = "binary", base_score = 0.5)
tree_list
